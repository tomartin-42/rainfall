1.- Último bonus!!! Vamos al grano

2.- Lo único que vemos interesante es el main()

3.- Lo primero hace una reserva para variables locales en el stack de 0xa0 (160) bytes
  [...]
  0x080484f4 <+0>:	push   ebp
  0x080484f5 <+1>:	mov    ebp,esp
  0x080484f7 <+3>:	push   edi
  0x080484f8 <+4>:	push   ebx
  0x080484f9 <+5>:	and    esp,0xfffffff0
  0x080484fc <+8>:	sub    esp,0xa0
  [...]

4.- Luego tenemos un fopen("r", "/home/user/end/.pass")
  [...]
  0x08048502 <+14>:	mov    edx,0x80486f0                ;str "r"
  0x08048507 <+19>:	mov    eax,0x80486f2                ;str "/home/user/end/.pass"
  0x0804850c <+24>:	mov    DWORD PTR [esp+0x4],edx
  0x08048510 <+28>:	mov    DWORD PTR [esp],eax
  0x08048513 <+31>:	call   0x8048410 <fopen@plt>
  0x08048518 <+36>:	mov    DWORD PTR [esp+0x9c],eax
  [...]

5.- Ahora hace un memset(buff, 0, 132) 
  [...]
  0x0804851f <+43>:	lea    ebx,[esp+0x18]               ;buff
  0x08048523 <+47>:	mov    eax,0x0 
  0x08048528 <+52>:	mov    edx,0x21                     ;0x21 = 33(decimal) * 4 bytes -> 132 bytes
  0x0804852d <+57>:	mov    edi,ebx
  0x0804852f <+59>:	mov    ecx,edx
  0x08048531 <+61>:	rep stos DWORD PTR es:[edi],eax     ;menset()
  [...]

6.- Compara si fopen() ha retornado 0 o si argc != 2 en caso de no cumplirse cualquiera de los dos setea eax = -1 y salta
  Al final del main <main+289> y termina
  [...]
  0x08048533 <+63>:	cmp    DWORD PTR [esp+0x9c],0x0     ;compara 0x0 con el retorno de fopen()
  0x0804853b <+71>:	je     0x8048543 <main+79>
  0x0804853d <+73>:	cmp    DWORD PTR [ebp+0x8],0x2      ;compara 0x2 con argc
  0x08048541 <+77>:	je     0x804854d <main+89>
  0x08048543 <+79>:	mov    eax,0xffffffff               ;set eax = -1
  0x08048548 <+84>:	jmp    0x8048615 <main+289>         ;sale
  [...]

7.- Prepara y ejecuta un fread() sobre el puntero devuelto por fopen(). fread(buff, 1, 66, file)  
  [...]
  0x08048551 <+93>:	mov    edx,DWORD PTR [esp+0x9c]     ;puntero file
  0x08048558 <+100>:	mov    DWORD PTR [esp+0xc],edx
  0x0804855c <+104>:	mov    DWORD PTR [esp+0x8],0x42   ;66
  0x08048564 <+112>:	mov    DWORD PTR [esp+0x4],0x1    ;1
  0x0804856c <+120>:	mov    DWORD PTR [esp],eax        ;buff
  0x0804856f <+123>:	call   0x80483d0 <fread@plt>      ;fread()
  [...]

8.- Atoi sobre argc[1]. atoi(argv[1])
  [...]
  0x08048579 <+133>:	mov    eax,DWORD PTR [ebp+0xc]    ;**argv
  0x0804857c <+136>:	add    eax,0x4                    :argv[1]
  0x0804857f <+139>:	mov    eax,DWORD PTR [eax]
  0x08048581 <+141>:	mov    DWORD PTR [esp],eax
  0x08048584 <+144>:	call   0x8048430 <atoi@plt>       ;atoi(argv[1])
  [...]

9.- Algo raro. Lo que hace es setear la posición de buff que devuelve el atoi(argv[1]) a 0; -> buff[atoi(argv[1])] = 0
  [...]
  0x08048589 <+149>:	mov    BYTE PTR [esp+eax*1+0x18],0x0
  [...]

10.- Se prepara para otro fread(). fread(&buff[66], 1, 65, file)
  [...]
  0x0804858e <+154>:	lea    eax,[esp+0x18]             ;buff
  0x08048592 <+158>:	lea    edx,[eax+0x42]             ;buff[66] a edx
  0x08048595 <+161>:	mov    eax,DWORD PTR [esp+0x9c]   ;punter file
  0x0804859c <+168>:	mov    DWORD PTR [esp+0xc],eax    
  0x080485a0 <+172>:	mov    DWORD PTR [esp+0x8],0x41   ;65
  0x080485a8 <+180>:	mov    DWORD PTR [esp+0x4],0x1    
  0x080485b0 <+188>:	mov    DWORD PTR [esp],edx        ;buff[66]
  0x080485b3 <+191>:	call   0x80483d0 <fread@plt>      ;fread(buff[66], 1, 65, file)
  [...]

11.- De <main+196> a <main+206> hace un fclose(file) normal.

12.- Ahora viene lo interesante hace una strcmp() entre buff y argv[1] si = 0 ejecuta un execl("/bin/sh", "sh", NULL) que nos daría la
  la posibilidad de leer la flag
  [...]
  0x080485c7 <+211>:	mov    eax,DWORD PTR [ebp+0xc] 
  0x080485ca <+214>:	add    eax,0x4                            ;argv[1]
  0x080485cd <+217>:	mov    eax,DWORD PTR [eax]
  0x080485cf <+219>:	mov    DWORD PTR [esp+0x4],eax
  0x080485d3 <+223>:	lea    eax,[esp+0x18]                     ;buff
  0x080485d7 <+227>:	mov    DWORD PTR [esp],eax
  0x080485da <+230>:	call   0x80483b0 <strcmp@plt>             ;strcmp(buff, argv[1])
  0x080485df <+235>:	test   eax,eax                            ;comprueba si el strcmp ha dado 0
  0x080485e1 <+237>:	jne    0x8048601 <main+269>               ;de strcmp() != 0 salta 
  0x080485e3 <+239>:	mov    DWORD PTR [esp+0x8],0x0           
  0x080485eb <+247>:	mov    DWORD PTR [esp+0x4],0x8048707      ;str "sh"
  0x080485f3 <+255>:	mov    DWORD PTR [esp],0x804870a          ;str "/bin/sh"
  0x080485fa <+262>:	call   0x8048420 <execl@plt>              ;execl("/bin/sh", "sh", NULL)
  0x080485ff <+267>:	jmp    0x8048610 <main+284>               ;salta al final y sale;
  [...]

13.- En caso de fallar la comprobación anterior salta a este punto que es un puts(&buff[66])
  [...]
  0x08048601 <+269>:	lea    eax,[esp+0x18]         ;buff
  0x08048605 <+273>:	add    eax,0x42               ;&buff + 66 -> buff
  0x08048608 <+276>:	mov    DWORD PTR [esp],eax    
  0x0804860b <+279>:	call   0x80483e0 <puts@plt>   ;puts(&buff[66])
  [...]

14.- Es facil. Tenemos que inertar una cadena en argv[1] que al compararse con buff sean iguales para que nos de una shell

15.- Si le pasamos como argumento una cadena vacia (./bonus3 "") el atoi devolverá 0 y buff[0] = 0, la cadena de argv[1] será tambien 0
  y se cumplirá la condición y tendremos la shell

  ./bonus3 ""

16.- La flag esta en /home/end/.pass y hay un gracioso mensage en /home/end/end


